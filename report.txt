Rapport inlämningsuppgift 2
Objektorienterad prorammering i C#
av David Ström

- Hur jag bröt ner problemet till mindre delar.
Som med alla uppgifter är det bra att bryta ned ett problem i mindre delar.
Jag utgick mer eller mindre från instruktionerna och gjorde punkt för punkt.
Vissa punkter gick även att dela in i ytterligare mindre delar. Jag började 
med inloggningsfunktionen för att sedan skapa menyn. Efter detta var gjort 
tog jag mig an att skapa en en klass (Member) som fungerar som en mall för 
varje medlem i basgruppen. När jag var klar med den skapade jag en lista
som innehöll verje medlem. Sedan kom jag fram till implementeringen av menyn.
Det vill säga det som ska ske när användaren gör ett val från menyn. Detta
steg delade jag upp så att varje valmöjlighet blev en egen del. Sedan gick 
jag mer eller mindre uppifrån och ned och tog menypunkt för menypunkt och 
skapade upp implementeringen. Jag började med att skriva all kod i Main-metoden
för att sedan undan för undan refoktorera koden in i olika metoder. Jag 
försökte hålla mig till att varje metod bara skulle göra en sak vilket ledde 
till ett flertal metoder. Jag skapade en textfil där all information om alla
medlemmar sparas. Texten från textfilen läses sedan in med hjälp av en metod. 
Till sist skapade jag tre klasser (Print, CRUD och Logic) där jag placerade 
de olika metoderna.

Inloggningsfunktionen
Här får användaren skriva in ett lösenord som sedan jämförs med strängen 
"Bästkusten". Om strängarna är lika får användaren tillträde till programmet 
och metoden Run() anropas. Annars skrivs ett felmeddelande ut och användaren 
får försöka igen med hjälp av en do/while-loop. När jag var klar med det 
tyckte jag att det skulle vara kul att försöka göra så att lösenordet som 
användaren matar in döljs av asterisker likt ett riktigt lösenord, samtidigt
som knapptryckningarna sparas till en sträng i bakgrunden. Jag implementerade 
detta med hjälp av ConsoleKeyInfo och Console.ReadKey(true), jag använder 'true' 
så att kanpptrycken registreras men inte syns. Trycker användaren endast Enter 
och inget annat skrivs ett lösenordstips ut till skärmen. Matar användaren in fel 
lösenord tre gånger i rad stängs programmet ned.

Menyn
Att skapa upp menyn var enkelt då jag bara använde mig av flera Console.WriteLine().
Varje alternativ fick en siffra kopplad till sig för att underlätta för användaren. 
Koden för menyn extraherade jag till en egen metod som jag döpte till Menu() 
och som sedan lades i klassen Print.

Member-klassen
Jag skapade en klass som jag döpte till Member eftersom den skulle fungera 
som en mall för alla medlemmar i basgruppen. Jag gav Member 12 privata fält 
(jag lade till ett fält för efternamn och ett extra fält som jag döpte till 
gender för att kunna använda pronomen för varje medlem). Sedan skapade 
jag upp properties för varje fält. Jag skapade två konstruktrer, en tom 
(just in case) och en som tog emot argument för varje fält vilket gjorde 
att jag kunde instansiera varje medlem på ett enkelt sätt. Till sist skapade 
jag en metod, Describe(), som använder alla fält för att beskriva medlemmen 
och skriva ut det till skärmen. Jag gjorde också en override av metoden ToString()
vilken nu skriver ut lite kort att klassen innehåller medlemmar i Bästkusten.

Read()
Jag skapade metoden Read() som läser in information från en textfil och sedan
skapar upp en lista av Member. Informationen från textfilen delas sedan upp till
olika members med hjälp av en for-loop som anropar metoden AddMember() som för 
varje iteration lägger till en ny medlem i listan. Jag valde också att göra så 
att de metoder som på något sätt ska visa information om gruppen först anropar 
Read()-metoden för att kunna visa en korrekt version av informationen som finns 
sparad i textfilen. Detta görs då medlemmarna sorteras efter förnamn och i 
bokstavsordning. Vid förändringar av listan (såsom när en medlem läggs till, 
tas bort eller ändras) kan detta potensiellt göra att informationen visas på ett 
felaktigt sätt om den inte läses in på nytt inför varje visning.

Implementeringen av menyn
Detta steg delade jag upp i flera mindre steg där jag valde att tackla varje 
moment för sig.

Print.Members()
Första delen är att lista alla medlemmar i basgruppen separerat med ett 
kommatecken. Här använde jag först en foreach-loop där jag separerade varje 
medlems namn med ett ',' men då blev det ett komma efter sista personen och det 
ville jag inte ha så jag bytte till en for-loop vilket gav mig mer kontroll. 
Detta gjorde att jag kunde bestämma om det skulle va ett ',' efter namnet eller 
om det skulle va ett &-tecken innan sista namnet. Jag valde även att göra så 
att programmet byter till en ny rad efter att 5 namn skrivits ut så att texten
inte sticker iväg alldeles för långt åt höger.

Print.Details()
Andra delen är att låta användaren få ut detaljerad information om en 
specifik gruppmedlem. Detta gjorde jag med hjälp av en metod, Details(), 
som först läste in medlemmarna med CRUD.Read() och sedan anropade 
ListOfMembers() som listande alla medlemmar. Sedan anropas metoden 
Describe() via den gruppmedlem som valts som i sin tur skriver ut den 
detaljerade informationen. Denna del körs sedan ända tills användaren 
väljer att återgå till huvudmenyn igen.

CRUD.Create()
Sedan valde jag att lägga till en egen del som ger användaren möjligheten 
att lägga till en medlem i gruppen. Detta gjorde jag genom att användaren 
får mata in alla värden för medlemmen. Sedan sparas detta till textfilen 
tillsammans med alla andra medlemmar så att den nya medlemmen finns kvar 
även om programmet stängs ned och startas om. Detta gjorde jag med hjälp
av File.WriteAllLines().

CRUD.Edit()
Fjärde delen är också det en egen tillagd del som låter användaren
ändra på information om en gruppmedlem. Först läses medlemmarna in med
Read(). Sedan listas medlemmarna med ListOfMembers() och användaren får
sedan välja vilken medlem som ska ändras. Efter det får användaren välja 
vilken del av informationen som ska ändras. Om användaren väljer att endast
trycka Enter eller om användaren matar in bokstäver där det förväntas siffror
avbryts åtgärden annars byts den gamla informationen ut mot den nya. 
Detta sparas sedan till textfilen med File.WriteAllLines().

CRUD.Remove()
Femte delen är att ta bort en medlem. För detta skapade jag en metod, 
Remove() som först visar alla medlemmar med hjälp av ListOfMembers(). 
Sedan får användaren välja vilken medlem som ska tas bort och den medlemmen
tas sedan bort från listan med hjälp av metoden RemoveAt(). Medlemmen tas
även från textfilen med File.WriteAllLines().

ExitProgram()
Sista delen är att avsluta programmet och detta gjorde jag genom att skapa 
metoden ExitProgram(). Här skrivs en avslutande text ut til skärmen och 
sedan sätts bool 'exit' till 'true' vilket gör att villkoret i do/while-loopen 
inte längre är sant och programmet avskutas.

Namngivning
När det kommer till namngivning använde jag mig av camelCase för alla variabler
och PascalCase för metoder och klasser. Jag använde enbart engelska variabelnamn 
och jag försökte vara så beskrivande som jag bara kunde så att namnen tydligt 
skulle indikera vad de var till för.

Saker jag kunde gjort annorlunda
Min felhantering i metoden Create() är bristfällig. Det enda jag har
gjort är att användaren kan avsluta åtgärden om hen bara trycker Enter. 
Detsamma sker också om användaren matar in något annat än siffror till de 
fälten som ska spara ett heltal men annars kan Användaren mer eller mindre 
skriva in lite vad som helst på varje fält. Detta skulle jag kunnat gjort 
mer utförligt. Koden för hur metoden avbryts om användaren väljer att avbryta
är inte heller den bästa med mycket copy-paste och jag är inte helt DRY där.
Det är också något jag kunde gjort bättre även om jag försökte skapa två
metoder, en för att tilldela ett värde och en för validering, för att minska 
ner på allt copy-paste.

Övrigt
När det gäller for- och foreach-loopar valde jag att använda båda för att 
göra mer eller mindre samma sak fast på olika sätt. Till exempel använder 
jag en for-loop för att skriva ut alla medlemmars namn på ett ställe men en 
foreach-loop på ett annat. En foreach-loop är väldigt smidig när man bara 
vill skriva ut allt ur en lista från början till slut, men när man behöver 
lite mer kontroll på var i listan man befinner sig är en for-loop så mycket 
bättre. Visst du kan skapa upp en räknare som håller koll åt dig i en 
foreach-loop men med en for-loop har du redan det i och med en variabel som 
hela tiden inkrementeras för varje vända.

Jag lade till två metoder som bara är till för ett estetiskt syfte. Ena 
metoden Print.InGreen() skriver ut ett meddelande som skickades med som 
argument i grönt och den andra Print.InRed() skriver ut ett meddelande
i rött.

Till sist lade jag till lite rubriker med hjälp av en ASCII Art Generator
vilken gör programmet lite roligare att titta på. Jag hade säkert kunnat
sparat rubrikerna till en textfil och sedan läst in dem i programmet likt 
jag gör med medlemmarna i Read()-metoden istället för att hårdkoda dem med
Console.WriteLines, men jag var var inte helt säker på hur jag skulle göra 
det på ett smidigt sätt så det blev såhär istället.
